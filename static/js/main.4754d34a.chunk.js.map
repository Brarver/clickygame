{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Frame/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","className","onClick","handleClick","id","lost","won","alt","name","src","image","Wrapper","children","Frame","message","points","topScore","Game","state","characters","shuffleCharacters","i","length","j","Math","floor","random","temp","reset","data","newData","map","character","clicked","newCharacters","resetUI","setTimeout","this","setState","bind","madeCorrectGuess","newTopScore","newScore","madeIncorrectGuess","correct","newCharacter","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4754d34a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.handleClick(props.id)}>\n      <div className={`img-container ${props.lost ? \" lostflash\" : \"\"}${props.won ? \" wonflash\" : \"\"}`}>\n        <img alt={props.name} src={props.image} />\n        \n      </div>\n\n    </div>\n  );\n}\n\nexport default CharacterCard;\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return (\n    <div className=\"wrapper\">{props.children}\n      \n    </div>\n\n  )\n}\n\nexport default Wrapper;\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Frame(props) {\n  return (\n    <div className=\"main\">\n      <div className=\"header\">\n        <div className=\"title\">Clicky Game</div>\n      </div>\n      <div className={`board ${((props.lost || props.won) ? \" boardpadding\" : \"\")}`}>\n        <div className={`status ${props.won ? \" showwin\" : \"\"}`}>YOU WIN!</div>\n        <div className={`status ${props.lost ? \" showlost\" : \"\"}`}>YOU LOST!</div>\n        <div className={`message ${props.won || props.lost ? \" hide\" : \"\"}`}>{props.message}</div>\n        <div className={`score ${props.won || props.lost ? \" hide\" : \"\"}`}>Score: {props.points} | Top Score: {props.topScore}</div>\n      </div>\n      \n      <div className=\"frame\">{props.children}</div>;\n    </div>\n    \n  )\n}\n\nexport default Frame;","import React, { Component } from 'react';\nimport CharacterCard from \"../CharacterCard\";\nimport Wrapper from \"../Wrapper\";\nimport Frame from \"../Frame\";\nimport characters from \"../../characters.json\";\n\n\nclass Game extends Component {\n  state = {\n    characters,\n    points: 0, \n    topScore: 0,\n    message: 'Click an image to earn points. Don\\'t click any image more than once!',\n    lost: false,\n    won: false\n  }\n\n componentDidMount() {\n  this.setState({ characters: this.shuffleCharacters(this.state.characters) });\n }\n\n shuffleCharacters = characters => {\n   for (let i = characters.length -1; i > 0; i--) {    \n     let j = Math.floor(Math.random() * (i + 1));       \n     let temp = characters[i];                        \n     characters[i] = characters[j];                   \n     characters[j] = temp;\n   }\n   return characters;\n\n }\n\n reset = data => {\n    const newData = data.map(character => ({ ...character, clicked: false }) );\n    const newCharacters = this.shuffleCharacters(newData);\n    return this.resetUI(newCharacters)\n }\n\n resetUI = newCharacters => {\n   setTimeout(function () {\n    this.setState({ won: false,\n                    lost: false,\n                    characters: newCharacters\n                 })\n   }.bind(this), 3000)\n }\n\n madeCorrectGuess = newData => {\n    const { topScore, points } = this.state;\n    const newScore = points + 1;\n    var newTopScore\n    var message = 'You guessed correctly!'\n    if (newScore === 12) {\n      this.setState({\n        points: 0,\n        topScore: 12,\n        won: true,\n        message: 'Click any image to restart!'\n      });\n      this.reset(newData)\n      return\n    \n    }else if (topScore > newScore) {\n      newTopScore = topScore\n    } else if (newScore > topScore) {\n      newTopScore = newScore\n    } else {\n      newTopScore = topScore\n    }\n\n    this.setState({\n      characters: this.shuffleCharacters(newData),\n      points: newScore,\n      topScore: newTopScore,\n      message: message\n    });\n }\n\n madeIncorrectGuess = newData => {\n  this.setState({\n    points: 0,\n    message: 'You lost! Click any image to restart.',\n    lost: true\n  })\n\n  this.reset(newData)\n  \n }\n\n handleClick = id => {\n   let correct = false;\n   const newData = this.state.characters.map(character => {\n     const newCharacter = { ...character };\n     if (newCharacter.id === id) {\n       if (!newCharacter.clicked) {\n        correct = true;\n        newCharacter.clicked = true;\n       }\n     }\n     return newCharacter\n   })\n   correct ? this.madeCorrectGuess(newData) : this.madeIncorrectGuess(newData)\n }\n\n  render() {\n    return (\n      <Frame \n        points={this.state.points}\n        topScore={this.state.topScore}\n        message={this.state.message}\n        won={this.state.won}\n        lost={this.state.lost}\n        >\n      <Wrapper>\n      {this.state.characters.map(character => (\n        <CharacterCard\n          id={character.id}\n          key={character.id}\n          clicked={character.clicked}\n          lost={this.state.lost}\n          won={this.state.won}\n          image={character.image}\n          handleClick={this.handleClick}\n\n        />\n      ))}\n      </Wrapper>\n      </Frame>\n    )\n  }\n}\n\nexport default Game;","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}